class HolyForceSpell : ArcanumSpell
{
	override int GetIndex() { return 10; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeConjuration'; }
	override string GetName() { return "Holy Force"; }
	override int GetSpellType() { return SType_SelfOrMass; }
	override int GetCatalystAmount() { return 400; }
	override string GetDescription() { return String.Format("Prevents all archviles within 20m from disappearing until they die. Forces it out of hiding if it's invisible. If no archviles were affected, trigger nearby curses, if any. Reveals possessed barrels."); }
	override string GetTechnicalInfo() { return "Mass"; }
	override int GetMaxLevel() { return 1; }
	override int GetCost() { return 60; }
	override int GetAggroGain() { return 10; }
	override class<ArcanumSigil> GetSigil() { return 'HolyForceSigil'; }
}

class HolyForceSigil : ArcanumSigil
{
	override void ActivateSelfOrMass()
	{
		bool HasPlayedSound = false;
		bool HasForcedArchvile = false;
		HDActor a;
		ThinkerIterator it;

		// [Ace] The iterators are deliberately split.
		it = ThinkerIterator.Create('Necromancer', STAT_DEFAULT);
		while ((a = HDActor(it.Next())))
		{
			if (Distance2D(a) > 42 * 20 || a.Health <= 0 || a.bFRIENDLY || a.CheckInventory("HolyCompeller", 1))
			{
				continue;
			}

			if (!HasPlayedSound)
			{
				PlayCastSound(self, "Arcanum/Conjuration/HolyForce");
				HasPlayedSound = true;
			}
			a.A_GiveInventory("HolyCompeller");
			HasForcedArchvile = true;
		}

		// [Ace] If no archviles were affected, activate nearby curses, if any.
		if (!HasForcedArchvile)
		{
			it = ThinkerIterator.Create('NecroGhost', STAT_DEFAULT);
			while ((a = HDActor(it.Next())))
			{
				if (Distance2D(a) > 42 * 20 || a.InStateSequence(a.CurState, a.FindState('birth')) || a.GetClassName() != 'NecroGhost')
				{
					continue;
				}

				if (!HasPlayedSound)
				{
					PlayCastSound(self, "Arcanum/Conjuration/HolyForce");
					HasPlayedSound = true;
				}
				a.SetStateLabel('Birth');
			}
		}

		it = ThinkerIterator.Create('BarrelGremlin', STAT_DEFAULT);
		while ((a = HDActor(it.Next())))
		{
			if (Distance2D(a) > 42 * 20 || a.tracer is 'HolyForceBarrelGlow')
			{
				continue;
			}

			if (!HasPlayedSound)
			{
				PlayCastSound(self, "Arcanum/Conjuration/HolyForce");
				HasPlayedSound = true;
			}
			Actor light = Spawn('HolyForceBarrelGlow', a.pos);
			light.master = a;
			a.tracer = light;
		}
	}

	override void InitRuneSlots()
	{
		vector2 Size = (4, 6.66);
		CreateRuneSlot((-32.1, 18.75), Size, 1.4, 2.0);
		CreateRuneSlot((0, 18.75), Size, 1.4, 2.0);
		CreateRuneSlot((32.1, 18.75), Size, 1.4, 2.0);
		CreateRuneSlot((0, -37.1), Size, 1.4, 2.0);
	}

	Default
	{
		Height 44;
		Radius 50;
		StencilColor "AAAAAA";
	}

	States
	{
		Spawn:
			CRCN B 0;
			Goto Super::Spawn;
	}
}

class HolyCompeller : Inventory
{
	override void DoEffect()
	{
		if (!owner)
		{
			Destroy();
			return;
		}

		let Necro = Necromancer(owner);
		if (Necro && Necro.tics > 20 && Necro.InStateSequence(Necro.CurState, Necro.FindState('painedandgone')))
		{
			Necro.A_Pain();
			Necro.tics = 20;
		}
	}
}

class HolyForceBarrelGlow : PointLightPulse
{
	override void Tick()
	{
		if (!master)
		{
			Destroy();
			return;
		}

		Super.Tick();
	}

	Default
	{
		+DYNAMICLIGHT.ATTENUATE
		Args 255, 64, 64, 32, 48;
	}
}