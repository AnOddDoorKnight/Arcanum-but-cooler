class HolyForceSpell : ArcanumSpell
{
	override int GetIndex() { return 10; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeConjuration'; }
	override string GetName() { return "Holy Force"; }
	override int GetSpellType() { return SType_SelfOrMass; }
	override int GetCatalystAmount() { return 400; }
	override string GetDescription() { return String.Format("Prevents an archvile from disappearing until it dies. Forces it out of hiding if it's invisible. Also reveals possessed barrels."); }
	override string GetTechnicalInfo() { return "Mass"; }
	override int GetMaxLevel() { return 1; }
	override int GetCost() { return 60; }
	override int GetAggroGain() { return 3; }
	override class<ArcanumSigil> GetSigil() { return 'HolyForceSigil'; }
}

class HolyForceSigil : ArcanumSigil
{
	override void ActivateSelfOrMass()
	{
		ThinkerIterator it = ThinkerIterator.Create('HDActor', STAT_DEFAULT);
		HDActor a;
		while ((a = HDActor(it.Next())))
		{
			if (Distance2D(a) > 42 * 20)
			{
				continue;
			}
			
			if (!HasForcedArchvile && a is 'Necromancer' && !a.bFRIENDLY && !a.CheckInventory("HolyCompeller", 1))
			{
				if (!HasPlayedSound)
				{
					PlayCastSound(self, "Arcanum/Conjuration/HolyForce");
					HasPlayedSound = true;
				}
				a.A_GiveInventory("HolyCompeller");
				HasForcedArchvile = true;
			}
			else if (a is 'BarrelGremlin' && !(a.tracer is 'HolyForceBarrelGlow'))
			{
				if (!HasPlayedSound)
				{
					PlayCastSound(self, "Arcanum/Conjuration/HolyForce");
					HasPlayedSound = true;
				}
				Actor light = Spawn('HolyForceBarrelGlow', a.pos);
				light.master = a;
			}
		}
	}

	override void InitRuneSlots()
	{
		vector2 Size = (4, 6.66);
		CreateRuneSlot((-32.1, 18.75), Size, 1.5, 2.5);
		CreateRuneSlot((0, 18.75), Size, 1.5, 2.5);
		CreateRuneSlot((32.1, 18.75), Size, 1.5, 2.5);
		CreateRuneSlot((0, -37.1), Size, 1.5, 2.5);
	}

	bool HasPlayedSound;
	bool HasForcedArchvile;

	Default
	{
		Height 44;
		Radius 50;
		StencilColor "AAAAAA";
	}

	States
	{
		Spawn:
			CRCN B 0;
			Goto Super::Spawn;
	}
}

class HolyCompeller : Inventory
{
	override void DoEffect()
	{
		if (!owner)
		{
			Destroy();
			return;
		}

		let Necro = Necromancer(owner);
		if (Necro && Necro.tics > 20 && Necro.InStateSequence(Necro.CurState, Necro.FindState('painedandgone')))
		{
			Necro.A_Pain();
			Necro.tics = 20;
		}
	}
}

class HolyForceBarrelGlow : PointLightPulse
{
	override void Tick()
	{
		if (!master)
		{
			Destroy();
			return;
		}

		Super.Tick();
	}

	Default
	{
		+DYNAMICLIGHT.ATTENUATE
		Args 255, 64, 64, 32, 48;
	}
}