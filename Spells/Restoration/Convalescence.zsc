class ConvalescenceSpell : ArcanumSpell
{
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeRestoration'; }
	override int GetIndex() { return 0; }
	override string GetName() { return "Convalescence"; }
	override int GetSpellType() { return SType_SelfOrMass | SType_Targeted; }
	override int GetCatalystAmount() { return 75; }
	override string GetDescription() { return String.Format("Recover 1 health every \c[Gold]%i\c- heartbeat%s for 60 seconds. Prevents pain jolts from second flesh for the duration of the effect.", 4 - Level, Level < GetMaxLevel() ? "s" : ""); }
	override string GetTechnicalInfo() { return "Self, Targeted, Touch"; }
	override int GetExperienceGain() { return 2; }
	override int GetCost() { return 25; }
	override int GetAggroGain() { return 2; }
	override class<ArcanumSigil> GetSigil() { return 'ConvalescenceSigil'; }
}

class ConvalescenceSigil : ArcanumSigil
{
	override void ActivateTargeted()
	{
		let plr = HDPlayerPawn(AimTarget());
		if (plr && plr.Health > 0 && Distance3D(plr) <= 42 * 2)
		{
			DoHealing(plr);
		}
	}

	override void ActivateSelfOrMass()
	{
		let plr = HDPlayerPawn(master);
		if (plr)
		{
			DoHealing(plr);
		}
	}

	private void DoHealing(HDPlayerPawn plr)
	{
		PlayCastSound(self, "Arcanum/Restoration/Convalescence");
		plr.A_GiveInventory("ConvalescenceEffect");
		let Effect = ConvalescenceEffect(plr.FindInventory("ConvalescenceEffect"));
		Effect.Level = SigilLevel;
	}

	override void InitRuneSlots()
	{
		vector2 Size = (4, 6.66);
		CreateRuneSlot((0, 13.4), Size, 1.0, 2.5);
		CreateRuneSlot((0, -13.4), Size, 1.0, 2.5);
		CreateRuneSlot((-15, 0), Size, 1.0, 2.5);
		CreateRuneSlot((15, 0), Size, 1.0, 2.5);
	}

	Default
	{
		ArcanumSigil.FadeOutSpeedMult 2.0;
		StencilColor "FF9E9E";
	}

	States
	{
		Spawn:
			CRRE A 0;
			Goto Super::Spawn;
	}
}

class ConvalescenceEffect : Powerup
{
	override void DoEffect()
	{
		let plr = HDPlayerPawn(owner);
		if (plr && plr.beatcount == 0 && plr.beatcounter % (4 - Level) == 0 && plr.Health < plr.MaxHealth())
		{
			plr.GiveBody(1);
		}

		Super.DoEffect();
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (damageType == 'staples')
		{
			damageType == 'None';
			newdamage = 0;
		}
		Super.ModifyDamage(damage, damageType, newdamage, passive, inflictor, source, flags);
	}

	int Level;

	Default
	{
		Powerup.Duration -60;
	}
}