class RevitalizationSpell : ArcanumSpell
{
	override int GetIndex() { return 50; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeRestoration'; }
	override string GetName() { return "Revitalization"; }
	override int GetSpellType() { return SType_SelfOrMass; }
	override int GetCastRequirements() { return 500; }
	override string GetDescription() { return String.Format("Heals all visible entities within 20m by 75%% of their total health. Players rapidly regenerate 5 health per heartbeat, and are immune to incap and stun for \c[Gold]%i\c- seconds.", 60 * Level); }
	override string GetTechnicalInfo() { return "Mass"; }
	override int GetExperienceGain() { return 5; }
	override class<ArcanumSigil> GetSigil() { return 'RevitalizationSigil'; }
}

class RevitalizationSigil : ArcanumSigil
{
	override void ActivateSelfOrMass()
	{
		HDMobBase Other;
		HDPlayerPawn PActor;

		BlockThingsIterator it = BlockThingsIterator.Create(self, HDCONST_ONEMETRE * 20);
		while (it.Next())
		{
			if (it.thing.Health <= 0 || Distance3D(it.thing) > HDCONST_ONEMETRE * 20 || !CheckSight(it.thing))
			{
				continue;
			}

			Other = HDMobBase(it.thing);
			PActor = HDPlayerPawn(it.thing);

			if (PActor)
			{
				PActor.GiveBody(int(PActor.MaxHealth() * 0.75));
				for (int i = 0; i < SigilLevel; ++i)
				{
					PActor.A_GiveInventory("RevitalizationEffect");
					let Effect = RevitalizationEffect(PActor.FindInventory("RevitalizationEffect"));
					Effect.Level = SigilLevel;
				}
			}
			else if (Other)
			{
				Other.bodydamage = 0;
				Other.stunned = 0;
				Other.GiveBody(int(Other.SpawnHealth() * 0.75));
				Other.A_GiveInventory("ConvalescenceEffect");
				let Effect = ConvalescenceEffect(Other.FindInventory("ConvalescenceEffect"));
				Effect.Level = 5;
			}
		}
		PlayCastSound(self, "Arcanum/Restoration/Revitalization");
	}

	override void InitRuneSlots()
	{
		vector2 BigSize = (6, 10);
		CreateRuneSlot((-32.5, 0), BigSize, 1.75, 1.25); CreateRuneSlot((32.5, 0), BigSize, 1.75, 1.25);
		CreateRuneSlot((0, 32.5), BigSize, 1.75, 1.25); CreateRuneSlot((0, -32.5), BigSize, 1.75, 1.25);

		vector2 SmallSize = (5, 8.333);
		CreateRuneSlot((-12.3, 12.3), SmallSize, 1.4, 1.25); CreateRuneSlot((12.3, 12.3), SmallSize, 1.4, 1.25);
		CreateRuneSlot((-12.3, -12.3), SmallSize, 1.4, 1.25); CreateRuneSlot((12.3, -12.3), SmallSize, 1.4, 1.25);
	}

	Default
	{
		Height 44;
		Radius 50;
		StencilColor "FF66FF";
	}

	States
	{
		Spawn:
			CRRE F 0;
			Goto Super::Spawn;
	}
}

class RevitalizationEffect : Powerup
{
	override void DoEffect()
	{
		EffectTics = min(EffectTics, 35 * (60 * Level));
		let plr = HDPlayerPawn(owner);
		if (plr && plr.beatcount == 0 && plr.beatcounter % 1 == 0)
		{
			plr.incaptimer = 0;
			plr.stunned = 0;
			if (plr.Health < plr.MaxHealth())
			{
				plr.GiveBody(5);
			}
		}

		Super.DoEffect();
	}

	int Level;

	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.ADDITIVETIME
		Powerup.Duration -60;
	}
}