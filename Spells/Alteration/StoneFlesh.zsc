class StoneFleshSpell : ArcanumSpell
{
	static const int Durations[] = { 3, 6, 10 };
	override int GetIndex() { return 80; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeAlteration'; }
	override string GetName() { return "Stoneflesh"; }
	override int GetSpellType() { return SType_SelfOrMass; }
	override int GetManaCost() { return 60; }
	override string GetDescription() { return String.Format("All visible entities within 20m get 50%% increased resistance to most damage for \c[Gold]%i\c- minutes. Effect helps put out fire faster.", Durations[Level - 1]); }
	override string GetTechnicalInfo() { return "Mass"; }
	override int GetExperienceGain() { return 4; }
	override class<ArcanumSigil> GetSigil() { return 'StoneFleshSigil'; }
	override string, class<Powerup> GetIndicatorInfo() { return "INDSFLSH", 'StoneFleshEffect'; }
}

class StoneFleshSigil : ArcanumSigil
{
	override void ActivateSelfOrMass()
	{
		PlayCastSound(self, "Arcanum/Alteration/StoneFlesh");
		BlockThingsIterator it = BlockThingsIterator.Create(self, HDCONST_ONEMETRE * 20);
		while (it.Next())
		{
			if (!it.thing.bISMONSTER && !it.thing.player || it.thing.Health <= 0 || Distance3D(it.thing) > HDCONST_ONEMETRE * 20 || !CheckSight(it.thing))
			{
				continue;
			}

			it.thing.A_GiveInventory("StoneFleshEffect");
			let effect = StoneFleshEffect(it.thing.FindInventory("StoneFleshEffect"));
			effect.Level = SigilLevel;
		}
	}

	override void InitRuneSlots()
	{
		vector2 BigSize = (4, 6.66);

		vector2 Size = (3, 5);
		double RSize = 0.75;
		double X = 3.3, Y = 15.5;
		CreateRuneSlot((-X, Y), Size, RSize);
		CreateRuneSlot((X, Y), Size, RSize);
		CreateRuneSlot((Y, -X), Size, RSize);
		CreateRuneSlot((Y, X), Size, RSize);
		CreateRuneSlot((X, -Y), Size, RSize);
		CreateRuneSlot((-X, -Y), Size, RSize);
		CreateRuneSlot((-Y, -X), Size, RSize);
		CreateRuneSlot((-Y, X), Size, RSize);

		Size = (4, 6.666);
		RSize = 1.35;
		X = 16.75; Y = 16.75;
		CreateRuneSlot((X, Y), Size, RSize);
		CreateRuneSlot((X, -Y), Size, RSize);
		CreateRuneSlot((-X, -Y), Size, RSize);
		CreateRuneSlot((-X, Y), Size, RSize);
	}

	Default
	{
		Height 44;
		Radius 50;
		StencilColor "B4A888";
	}

	States
	{
		Spawn:
			CRAL I 0;
			Goto Super::Spawn;
	}
}

class StoneFleshEffect : Powerup
{
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (passive && !(flags & (DMG_NO_FACTOR | DMG_FORCED)) && damageType != 'bleedout' && damageType != 'hot' && damageType != 'maxhpdrain' && damageType != 'internal' && damageType != 'falling' && damageType != 'holy')
		{
			newdamage = int(damage * 0.50);
		}
	}

	override void DoEffect()
	{
		EffectTics = min(EffectTics, 35 * 60 * StoneFleshSpell.Durations[Level - 1]);
		if (owner)
		{
			owner.A_GiveInventory("HDFireDouse", 20);
		}

		Super.DoEffect();
	}

	int Level;

	Default
	{
		+INVENTORY.ALWAYSPICKUP
		Powerup.Duration 0xFFFF;
	}
}