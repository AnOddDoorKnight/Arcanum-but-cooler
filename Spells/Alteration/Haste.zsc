class HasteSpell : ArcanumSpell
{
	static const int Durations[] = { 2, 5, 10 };
	override int GetIndex() { return 30; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeAlteration'; }
	override string GetName() { return "Haste"; }
	override int GetSpellType() { return SType_SelfOrMass; }
	override int, int GetCastRequirements() { return 300, 0; }
	override string GetDescription() { return String.Format("All visible players within 20m get an increase to speed by \c[Gold]%i\c-%% for \c[Gold]%i\c- minutes.", 50 + 25 * Level, Durations[Level - 1]); }
	override string GetTechnicalInfo() { return "Mass"; }
	override int GetExperienceGain() { return 4; }
	override class<ArcanumSigil> GetSigil() { return 'HasteSigil'; }
	override string, class<Powerup> GetIndicatorInfo() { return "INDHASTE", 'HasteEffect'; }
}

class HasteSigil : ArcanumSigil
{
	override void ActivateSelfOrMass()
	{
		PlayCastSound(self, "Arcanum/Alteration/Haste");
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			let plr = players[i].mo;
			if (plr && Distance3D(plr) <= HDCONST_ONEMETRE * 20 && CheckSight(plr))
			{
				plr.A_GiveInventory("HasteEffect");
				let effect = HasteEffect(plr.FindInventory("HasteEffect"));
				effect.Level = SigilLevel;
			}
		}
	}

	override void InitRuneSlots()
	{
		vector2 Size = (4, 6.666);
		double A = 18.3;
		double B = 12.94;
		double RSize = 1.25;
		CreateRuneSlot((0, A), Size, RSize);
		CreateRuneSlot((B, B), Size, RSize);
		CreateRuneSlot((A, 0), Size, RSize);
		CreateRuneSlot((B, -B), Size, RSize);
		CreateRuneSlot((0, -A), Size, RSize);
		CreateRuneSlot((-B, -B), Size, RSize);
		CreateRuneSlot((-A, 0), Size, RSize);
		CreateRuneSlot((-B, B), Size, RSize);
	}

	Default
	{
		Height 44;
		Radius 50;
		StencilColor "FFFF11";
	}

	States
	{
		Spawn:
			CRAL D 0;
			Goto Super::Spawn;
	}
}

class HasteEffect : PowerSpeed
{
	override void DoEffect()
	{
		EffectTics = min(EffectTics, 35 * 60 * HasteSpell.Durations[Level - 1]);
		Speed = 1.50 + 0.25 * Level;
		Super.DoEffect();
	}

	int Level;

	Default
	{
		Speed 1.75;
		+INVENTORY.ALWAYSPICKUP
		Powerup.Duration 0xFFFF;
	}
}