class HoradricMalusSpell : ArcanumSpell
{
	override int GetIndex() { return 40; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeAlteration'; }
	override string GetName() { return "Horadric Malus"; }
	override int GetSpellType() { return SType_SelfOrMass | SType_Targeted; }
	override int GetCatalystAmount() { return 400; }
	override string GetDescription() { return String.Format("Repairs repairable items by \c[Gold]%i%%\c- of their missing durability. Repairs Vulcanettes and *.E.R.P.s", 35 + 15 * Level); }
	override string GetTechnicalInfo() { return "Self, Targeted, Touch"; }
	override int GetExperienceGain() { return 5; }
	override int GetCost() { return 70; }
	override int GetAggroGain() { return 15; }
	override class<ArcanumSigil> GetSigil() { return 'HoradricMalusSigil'; }
}

class HoradricMalusSigil : ArcanumSigil
{
	override void ActivateTargeted()
	{
		Actor a = AimTarget();
		if (a && a.Health > 0 && Distance3D(a) <= 42 * 2)
		{
			RepairArmor(a);
		}
	}

	override void ActivateSelfOrMass()
	{
		if (master)
		{
			RepairArmor(master);
		}
	}

	private void TryPlaySound()
	{
		if (!HasPlayedSound)
		{
			PlayCastSound(self, "Arcanum/Alteration/HoradricMalus");
			HasPlayedSound = true;
		}
	}

	private void RepairArmor(Actor a)
	{
		for (Inventory Next = a.Inv; Next; Next = Next.Inv)
		{
			let Armor = HDArmourWorn(Next);
			if (Armor)
			{
				TryPlaySound();
				int MaxDurability = Armor.Mega ? 70 : 144;
				if (Armor.GetClassName() == 'HHelmetWorn')
				{
					MaxDurability = 50;
				}
				int DurabilityMissing = MaxDurability - Armor.Durability;
				Armor.Durability += int(DurabilityMissing * (0.35 + 0.15 * SigilLevel));
			}

			let vulc = Vulcanette(Next);
			if (vulc)
			{
				TryPlaySound();
				vulc.WeaponStatus[VULCS_PERMADAMAGE] = 0;
				vulc.WeaponStatus[VULCS_BREAKCHANCE] = 0;
			}

			let derp = DERPUsable(Next);
			if (derp)
			{
				TryPlaySound();
				derp.WeaponStatus[0] &= ~DERPF_BROKEN;
			}

			let herp = HERPUsable(Next);
			if (herp)
			{
				TryPlaySound();
				herp.WeaponStatus[0] &= ~HERPF_BROKEN;
			}

			if (Next.GetClassName() == 'HDDeployableBarricade')
			{
				TryPlaySound();
				int HealthMissing = Next.default.Health - Next.Health;
				Next.Health += int(HealthMissing * (0.35 + 0.15 * SigilLevel));
			}
		}
	}

	override void InitRuneSlots()
	{
		vector2 BigSize = (4, 6.66);
		CreateRuneSlot((-14, 0), BigSize, 1.0, 1.35); CreateRuneSlot((14, 0), BigSize, 1.0, 1.35);

		vector2 MedSize = (3, 5);
		CreateRuneSlot((-7.8, 7.1), MedSize, 0.7, 1.35); CreateRuneSlot((7.8, 7.1), MedSize, 0.7, 1.35);
		CreateRuneSlot((-7.8, -7.1), MedSize, 0.7, 1.35); CreateRuneSlot((7.8, -7.1), MedSize, 0.7, 1.35);

		vector2 SmallSize = (2, 3.33);
		CreateRuneSlot((0, 11), SmallSize, 0.5, 1.35); CreateRuneSlot((0, -11), SmallSize, 0.5, 1.35);
	}

	private bool HasPlayedSound;

	Default
	{
		ArcanumSigil.AddAlpha 1.25;
		ArcanumSigil.FadeOutSpeedMult 2.0;
		StencilColor "998456";
	}

	States
	{
		Spawn:
			CRAL E 0;
			Goto Super::Spawn;
	}
}