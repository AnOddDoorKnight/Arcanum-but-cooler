class HDArcanumTome : HDWeapon
{
	enum ArcanumTomeFlags
	{
		ATF_InSpellMenu = 1 << 0
	}

	enum ArcanumTomeProperties
	{
		ATProp_Flags,
		ATProp_SelectedTree,
		ATProp_SelectedSpell
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner , bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override double GunMass() { return 4; }
	override double WeaponBulk() { return 20; }
	override string, double GetPickupSprite() { return "ARCTZ0", 1.0; }
	override string GetHelpText()
	{
		string HText = WEPHELP_FIRE.."  Place rune\n"
		..WEPHELP_ALTFIRE.."  Create spell circle\n"
		..WEPHELP_ZOOM.."  Spell manager";

		if (WeaponStatus[ATProp_Flags] & ATF_InSpellMenu)
		{
			HText = WEPHELP_FIRE.." or "..WEPHELP_ALTFIRE.."  Cycle spells\n"
			..WEPHELP_FIREMODE.."+"..WEPHELP_FIRE.." or "..WEPHELP_ALTFIRE.."  Cycle spell trees\n"
			..WEPHELP_ZOOM.."  Exit spell manager";
		}

		return HText;
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		if (!(hdw.WeaponStatus[ATProp_Flags] & ATF_InSpellMenu))
		{
			return;
		}

		Font fnt = "SPTTLFNT";
		HUDFont TitleFont = HUDFont.Create(fnt);

		fnt = "SPDSCFNT";
		HUDFont DescFont = HUDFont.Create(fnt);

		int BaseOffset = -100;

		int SelTreeIndex = hdw.WeaponStatus[ATProp_SelectedTree];
		ArcanumSpellTree SelTree = SpellStorage.Trees[SelTreeIndex];
		sb.DrawString(TitleFont, SelTree.GetName(), (-140, BaseOffset), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT);
		sb.DrawString(DescFont, SelTree.GetDescription(), (-140, BaseOffset + 20), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_WHITE, 1.0, 280, 1);

		ArcanumSpell SelSpell = GetSelectedSpell();
		sb.DrawString(TitleFont, "Spells", (-140, BaseOffset + 90), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT);
		for (int i = 0; i < SelTree.Spells.Size(); ++i)
		{
			ArcanumSpell CurSpell = SelTree.Spells[i];
			sb.DrawString(DescFont, CurSpell.GetName(), (-140, BaseOffset + 110 + 10 * i), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, CurSpell == SelSpell ? Font.CR_GOLD : Font.CR_WHITE);
		}
		
		int SpellOffset = BaseOffset + 90;
		sb.DrawString(TitleFont, SelSpell.GetName(), (-40, SpellOffset), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_TEAL);
		if (SelSpell.GetMaxLevel() > 1)
		{
			string RomanNumeral = "";
			switch (SelSpell.Level)
			{
				case 1: RomanNumeral = "I"; break;
				case 2: RomanNumeral = "II"; break;
				case 3: RomanNumeral = "III"; break;
				case 4: RomanNumeral = "IV"; break;
				case 5: RomanNumeral = "V"; break;
			}

			string FullString = "\c[Gold]Level "..RomanNumeral.."\c-";
			if (SelSpell.Level < SelSpell.GetMaxLevel())
			{
				FullString = FullString.." [";
				for (int i = 0; i <= 10; ++i)
				{
					int Percentage = int(floor((SelSpell.Experience / double(SelSpell.ExperienceReqs[SelSpell.Level - 1])) * 10));
					FullString = FullString..(i < Percentage ? "=" : " ");
				}
				FullString = FullString.."]";
			}
			sb.DrawString(DescFont, FullString, (-40, SpellOffset + 20), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
			SpellOffset += 10;
		}
		
		sb.DrawString(DescFont, SelSpell.GetTechnicalInfo(), (-40, SpellOffset + 20), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_OLIVE);

		double Mult = AceCore.CheckForItem(hpl, "HDSoulCube") ? 0.80 : 1.0;
		int Catalyst = int(SelSpell.GetCatalystAmount() * Mult);
		int Cost = int(SelSpell.GetCost() * Mult);
		sb.DrawString(DescFont, "\c[DarkGray]Catalyst/Cost: \c[Blue]"..Catalyst.."/"..Cost.."\c-", (-40, SpellOffset + 30), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT);
		sb.DrawString(DescFont, "\c[Black]Aggro: "..SelSpell.GetAggroGain().."\c-", (-40, SpellOffset + 40), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT);
		sb.DrawString(DescFont, SelSpell.GetDescription(), (-40, SpellOffset + 60), sb.DI_SCREEN_CENTER | sb.DI_TEXT_ALIGN_LEFT, Font.CR_WHITE, 1.0, 180, 1);
	}

	override void DrawSightPicture(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl, bool sightbob, vector2 bob, double fov, bool scopeview, actor hpc, string whichdot)
	{
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = Screen.GetClipRect();
		sb.SetClipRect(-16 + bob.x, -16 + bob.y, 32, 32, sb.DI_SCREEN_CENTER);
		vector2 bob2 = bob * 2;
		bob2.y = clamp(bob2.y, -8, 8);
		sb.DrawImage("ARCNFRNT", (0, -2) + bob2, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP, alpha: 0.9);
		sb.SetClipRect(cx, cy, cw, ch);
		//sb.DrawImage("JDWBACK", (0, -7) + bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP);
	}

	override void DetachFromOwner()
	{
		WeaponStatus[ATProp_Flags] &= ~ATF_InSpellMenu;

		Super.DetachFromOwner();
	}

	override void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);

		let plr = HDPlayerPawn(other);
		if (plr && BluesToGive > 0)
		{
			plr.regenblues = BluesToGive;
			BluesToGive = 0;
		}

		InitStorage();
	}

	private void InitStorage()
	{
		SpellStorage = ArcanumSpellBrain.Get(owner.PlayerNumber());
	}

	private clearscope ArcanumSpellTree GetSelectedTree()
	{
		return SpellStorage.Trees[WeaponStatus[ATProp_SelectedTree]];
	}

	private clearscope ArcanumSpell GetSelectedSpell()
	{
		return GetSelectedTree().Spells[WeaponStatus[ATProp_SelectedSpell]];
	}

	private action void A_NextSpell()
	{
		int SpellCount = invoker.SpellStorage.SpellCountInTree(invoker.SpellStorage.Trees[invoker.WeaponStatus[ATProp_SelectedTree]].GetClass());
		invoker.WeaponStatus[ATProp_SelectedSpell]++;
		if (invoker.WeaponStatus[ATProp_SelectedSpell] >= SpellCount)
		{
			invoker.WeaponStatus[ATProp_SelectedSpell] = 0;
		}
	}

	private action void A_PrevSpell()
	{
		int SpellCount = invoker.SpellStorage.SpellCountInTree(invoker.SpellStorage.Trees[invoker.WeaponStatus[ATProp_SelectedTree]].GetClass());
		invoker.WeaponStatus[ATProp_SelectedSpell]--;
		if (invoker.WeaponStatus[ATProp_SelectedSpell] < 0)
		{
			invoker.WeaponStatus[ATProp_SelectedSpell] = SpellCount - 1;
		}
	}

	override void LoadoutConfigure(string input)
	{
		int StartBlues = GetLoadoutVar(input, "blues", 4);
		if (StartBlues > 0)
		{
			BluesToGive = StartBlues;
		}
	}

	override void ActualPickup(Actor other, bool silent)
	{
		let Tome = HDArcanumTome(other.FindInventory("HDArcanumTome"));
		if (Tome && Tome.SpellStorage)
		{
			// [Ace] Only give experience to spells that fit the bill, i.e. those that actually support experience.
			Array<ArcanumSpell> ValidSpells;
			for (int i = 0; i < Tome.SpellStorage.Trees.Size(); ++i)
			{
				for (int j = 0; j < Tome.SpellStorage.Trees[i].Spells.Size(); ++j)
				{
					let CurSpell = Tome.SpellStorage.Trees[i].Spells[j];
					if (CurSpell.Level < CurSpell.GetMaxLevel())
					{
						ValidSpells.Push(CurSpell);
					}
				}
			}

			int VSize = ValidSpells.Size();
			for (int i = 0; VSize > 0 && i < 15; ++i)
			{
				let CurSpell = ValidSpells[random(0, VSize - 1)];
				if (CurSpell.GainExperience())
				{
					other.A_Log(CurSpell.GetName().." has gained a level.", true);
				}
			}

			other.A_StartSound("weapons/pocket");
			other.A_Log("Your knowledge grows.", true);
			Destroy();
			return;
		}
		
		Super.ActualPickup(other, silent);
	}

	ArcanumSpellBrain SpellStorage;
	private int BluesToGive;
	private transient CVar InvertSelection;

	Default
	{
		+HDWEAPON.FITSINBACKPACK
		+INVENTORY.INVBAR
		HDWeapon.BarrelSize 5, 2, 1; // [Ace] I don't even know why.
		Scale 0.6;
		Tag "Arcanum tome";
		Inventory.PickupSound "weapons/pocket";
		HDWeapon.Refid "arc";
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "You picked up the Arcanum tome of knowledge. Unlimited power awaits those with the energy within.";
	}

	States
	{
		Spawn:
			ARCT Z -1;
			Stop;
		ReadyBook:
			ARCB A 1;
			Loop;
		Ready:
			ARCT A 1
			{
				if (JustPressed(BT_ZOOM))
				{
					if (invoker.WeaponStatus[ATProp_Flags] & ATF_InSpellMenu)
					{
						invoker.WeaponStatus[ATProp_Flags] &= ~ATF_InSpellMenu;
						A_SetHelpText();
					}
					else
					{
						invoker.WeaponStatus[ATProp_Flags] |= ATF_InSpellMenu;
						A_SetHelpText();
					}
					SetWeaponState("Nope");
					return;
				}
				if (invoker.WeaponStatus[ATProp_Flags] & ATF_InSpellMenu)
				{
					int TreeCount = invoker.SpellStorage.Trees.Size();

					if (!invoker.InvertSelection)
					{
						invoker.InvertSelection = CVar.GetCVar('arcanum_invert', player);
					}
					if (JustPressed(BT_ATTACK))
					{
						if (PressingFiremode())
						{
							invoker.WeaponStatus[ATProp_SelectedSpell] = 0;
							if (--invoker.WeaponStatus[ATProp_SelectedTree] < 0)
							{
								invoker.WeaponStatus[ATProp_SelectedTree] = TreeCount - 1;
							}
						}
						else if (invoker.InvertSelection.GetBool())
						{
							A_PrevSpell();
						}
						else
						{
							A_NextSpell();
						}
					}
					else if (JustPressed(BT_ALTATTACK))
					{
						if (PressingFiremode())
						{
							invoker.WeaponStatus[ATProp_SelectedSpell] = 0;
							if (++invoker.WeaponStatus[ATProp_SelectedTree] >= TreeCount)
							{
								invoker.WeaponStatus[ATProp_SelectedTree] = 0;
							}
						}
						else if (invoker.InvertSelection.GetBool())
						{
							A_NextSpell();
						}
						else
						{
							A_PrevSpell();
						}
					}
					A_WeaponReady(WRF_NOFIRE);
					return;
				}
				A_WeaponReady(WRF_ALL);
			}
			Goto ReadyEnd;
		Select0:
			ARCT A 0 A_Overlay(10, 'ReadyBook');
			Goto Select0Small;
		Deselect0:
			ARCT A 0
			{
				invoker.WeaponStatus[ATProp_Flags] &= ~ATF_InSpellMenu;
			}
			Goto Deselect0Small;
		DeadLowered:
			ARTC A -1 A_ClearOverlays(10, 10);
			Stop;
		User3:
			ARCT A 0 A_SelectWeapon("PickupManager");
			Goto Ready;
		Fire:
			ARCT E 5
			{
				player.GetPSPrite(PSP_WEAPON).frame = random(1, 3);
				FLineTraceData Data;
				LineTrace(angle, 192, pitch, TRF_NOSKY | TRF_ALLACTORS, height - 6, 0, 0, Data);
				if (Data.HitType == Data.TRACE_HitActor && Data.HitActor is 'ArcanumRuneSlot')
				{
					let RuneSlot = ArcanumRuneSlot(Data.HitActor);
					let Sigil = ArcanumSigil(RuneSlot.master);

					if (Sigil && Sigil.master == self)
					{
						RuneSlot.ActivateRune(self);
					}
				}
			}
			ARCT A 2;
			Goto Nope;
		AltFire:
			ARCT A 1;
			ARCT A 0
			{
				ArcanumSpell SelSpell = invoker.GetSelectedSpell();
				int ST = SelSpell.GetSpellType();

				double MPitch = min(ArcanumSigil.SelfCastMaxPitch, player.MaxPitch - (90 - ArcanumSigil.SelfCastMaxPitch));
				if (ST & ArcanumSpell.SType_SelfOrMass && !(ST & ArcanumSpell.SType_Targeted) && pitch < MPitch)
				{
					A_SetPitch(pitch + 10, SPF_INTERPOLATE);
					A_Refire('AltFire');
					return;
				}

				if (ST & ArcanumSpell.SType_SelfOrMass && pitch >= MPitch || ST & ArcanumSpell.SType_Targeted)
				{
					SetWeaponState('ActuallyAltFire');
					return;
				}
			}
			Goto Nope;
		ActuallyAltFire:
			ARCT E 5
			{
				ArcanumSpellTree SelTree = invoker.GetSelectedTree();
				ArcanumSpell SelSpell = invoker.GetSelectedSpell();

				let plr = HDPlayerPawn(self);

				double Mult = AceCore.CheckForItem(self, "HDSoulCube") ? 0.80 : 1.0;
				int Catalyst = int(SelSpell.GetCatalystAmount() * Mult);
				int Cost = int(SelSpell.GetCost() * Mult);

				if (plr.regenblues >= max(Catalyst, Cost))
				{
					FLineTraceData Data;
					LineTrace(angle, radius + 10, pitch, TRF_NOSKY, height - 12, 0, 0, Data);
					if (Data.HitType == Data.TRACE_HitNone || Data.HitType == Data.TRACE_HitFloor)
					{
						if (SelSpell.GainExperience())
						{
							A_Log(SelSpell.GetName().." has gained a level.", true);
						}
						
						plr.regenblues -= Cost;
						plr.aggravateddamage += SelSpell.GetAggroGain();

						ArcanumSigil c = ArcanumSigil(Spawn(SelSpell.GetSigil(), Data.HitLocation));
						c.angle = angle;
						if (!c.bDONTPITCH)
						{
							c.pitch = pitch;
						}
						c.master = self;
						c.SigilLevel = SelSpell.Level;

						double MPitch = min(ArcanumSigil.SelfCastMaxPitch, player.MaxPitch - (90 - ArcanumSigil.SelfCastMaxPitch));
						int SpellType = SelSpell.GetSpellType();
						if (SpellType & ArcanumSpell.SType_SelfOrMass && pitch >= MPitch)
						{
							c.SigilType = ArcanumSpell.SType_SelfOrMass;
						}
						else
						{
							c.SigilType = ArcanumSpell.SType_Targeted;
						}
					}
				}
				else
				{
					A_WeaponMessage("You feel too weak to cast "..SelSpell.GetName()..".");
				}
			}
			ARCT A 2;
			Goto Nope;
	}
}